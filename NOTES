I now have the gradient calculation.  It seems to be correct.
Now, I believe that I should go through and reconstruct the
states on each face according to

u^L_{i,j+1/2} = u_{i,j} + (grad(u) . rvec) phi(r)

where r = (grad(u) . rvec)_L / (grad(u) . rvec)_R

This will construct the interface states which will
then be used to solve the Riemann problem using Roe's
approximate scheme.

After that, all I need to do is change the
update subroutine so that the fluxes from all the interfaces
are accounted for in the computation of the residual.  Then,
I need to implement boundary conditions.  I'm going to need
slip wall and farfield for now probably.  Then, the Euler
solver should be done.

-------------------------

Something is wrong... I'm getting negative densities after
the first step which is causing NaNs.  I need to double
check the conversions from primitive to conservative,
reconstruction and switch from the barth limiter to the
minmod limiter.  There is a good explanation of the minmod
limiter in Leveque's book.

-------------------------

It seems that the information is not being communicated from
the farfield boundaries.  The fluxes aren't changing, which
indicates that the boundary condition is being enforced,
and it seems that the reconstruction is working okay...
When I print out reconstructed values, they seem reasonable.
One idea is to hardwire the reconstruction for the cartesian
grid case being solved.  Then I might be able to figure out
if the reconstruction is what is causing the issue.

-------------------------

The sign on some of the fluxes was wrong.  Now, the farfield
boundaries seem wrong.  It is because I am changing the sign
of the fluxes in the final loop.  I need to change the enforcement
of the farfield boundary conditions so that they use the inward pointing face normal!!!!!

-------------------------

Added Barth-Jespersen limiter formulation using their original
paper.  Something is wrong though because I get NaNs after the
first few timesteps.

-------------------------

I've tracked down the NaNs to the residual_inv subroutine.
When using RK4 to march in time, the NaNs arise after the first
stage of the RK4 process.  There must be something inside the select
case that is screwing things up.  This doesn't happen if the limiter
is set to "none".  The limiter variable phi is always real and finite.
I removed the multiplication by phi in the reconstruction step and
I'm still getting NaNs after the first stage of RK4.  This leads me
to believe that there is some unintended side-effect happening in the
code.  I need to find the side-effect and remove it.  I know that it is
isolated to the portion of the select case that matches "barth".

-------------------------

It seems that something about the slope limited reconstruction
causes the Riemann solver to return NaNs for the fluxes....  I'm
not sure how or why this is happening.  I've gotta figure out how
to implement the minmod slope limiter instead.  This is strange because
the limiter is returning between 0 and 1 at all times.  I printed out
the values and everything seemed reasonable.  I'm not sure why the
Riemann solver is returning NaNs.

-------------------------

12-22-2016
I believe the NaNs are coming about as a result of the slip wall
boundary condition.  I need to add another boundary condition which
strongly enforcing the slip wall bc.  This should be do-able
by setting up another boundary condition option.  I can't find anything
wrong with the Euler or RK4 time stepping.  I can't find anything
wrong with the slope-limited reconstruction...  I don't know what is
wrong.

-------------------------

12-23-2016 - 12:46 pm
I fixed some of the NaNs.  There were bugs in the barth limiter portion
of the code.  The barth limiter now works properly it seems.
I tried the barth limiter on the isentropic vortex case.  It works,
but is very diffusive.  The bugs were associated with copying the
code I wrote for the barth limiter and not changing some of the edges_v
to edges_h. The problem now is that the timestep I have to use is very small.
Also, it seems that when I get NaNs, they come from the horizontal interfaces.
I'm not sure what exactly is happening.  To try to fix it I am going to
finish implementing strong enforcement of slip wall BCs to all boundaries.

-------------------------

12-23-2016 - 11:02 pm
I found another bug in the enforcement of the slip wall BCs. Some
of the indices in the slip wall bc were wrong.  I was looping over
i instead of j in some cases.  I think there still might be something
wrong with the horizontal interfaces.  I need to debug more tomorrow.

-------------------------

12-24-2016 - 2:17 pm
I checked the 2D numerical solution against the 1D numerical solution
and the exact solution for the shock tube case.  It is weird.  It seems
that the results don't match.  I think I know what it is... I think that
I am inadvertently setting extrapolate BCs in the 1D code.  Are the sides
open??????  I'm not sure.  Out of time for now.  Need to check the actual
boundary conditions for Sod's problem.  In the 1D code, which matches the
exact solution, I am setting the BCs by copying the inside state to the
exterior state.  I think that is extrapolate BC??? Weird.

-------------------------

12-26-2016 - 8:46 am
The results match up until the shock impinges on the right wall and reflects.
The results from the 1D code match the "exact" result that I got from
the python script.  If I stop the 2d code before the shock reaches the right
wall, the results match the exact and 1d results very well.  On the WIND-US
website, they mentioned that they used a frozen bc at the left and right walls.
The frozen bc is equivalent to making the state at the wall the same as the
initial condition regardless of time.  It seems like a strange boundary
condition to me.  I'm just going to compare my 1D and 2D codes against the
exact solution for t=0.2 s.  They match perfectly at that time.

-------------------------

12-26-2016 10:39 pm
I believe there is something wrong with the fluxes from the
horizontal faces.  The vertical faces seem fine.  One way I could
check this is to run the shock tube going from down-to-up instead
of left-to-right.

-------------------------

12-26-2016 11:02 pm
I tried running the shock tube from down-to-up.  Everything seemed to
work fine.  I think the slow convergence may be due to the fact that
I'm using an explicit scheme.  I believe I could accelerate the convergence
by using implicit residual smoothing.  I've gotta do something.

-------------------------

12-27-2016 2:04 pm
I'm not sure that there is anything wrong with the code.  I've checked and
re-checked the residual_inv function.  I can't find anything wrong.  I'm
thinking that the ramp doesn't look exactly correct because the scheme is
taking a very long time to converge to the steady state.

-------------------------

12-28-2016 7:01 pm
Yesterday was not a good day.  Lost Max yesterday so not much progress.
I added the viscous fluxes.  Need to setup a test case.

-------------------------

12-30-2016 10:03 pm
I didn't work on this yesterday because I was working on a post-doc application.
I need to come up with a manufactured solution to check the Navier-Stokes code.
I'm going to use the one from the paper by Liao, Diskin, Peng and Luo.  Need to
write an operator for the Navier-Stokes equations in Mathematica in order to
determine what source term(s) I should add to the governing equations.

-------------------------

01-01-2017 8:10 pm
Working on adding an order-of-accuracy check using the method of manufactured
solutions.  I'm avoiding temporal accuracy for now and using a steady
solution.

-------------------------

01-01-2017 10:41 pm
I need to find a good way to add the viscous fluxes to all of the boundary
conditions.  I could make inviscid bcs 1000 series and viscous 2000.  I should
also find a way to switch the time steppers between viscous and inviscid.  For
the boundary conditions, I need to be able to provide the primitive variables
as well as the derivatives of the primitive variables for the viscous fluxes.
I need to create a new viscous flux function that takes all of this information
as inputs instead of using element information.  Pick up in apply_bcs in
solver.f90 and flux.f90.

-------------------------

01-02-2017 7:13 pm
I'm almost done with all the modifications necessary for validating the code using
the method of manufactured solutions.  Running out of steam for the day.  I need
to pick up in examples/manufactured/ns_validation.f90.

-------------------------

01-02-2017 10:24 pm
I finished the modifications required for the method of manufactured solutions.
Found one mistake in the enforcement of the boundary conditions for the MMS.
Getting NaNs in the residual_inv subroutine for vertical faces near the
upper right corner.  I'm not sure what is wrong.  I need to check the
residual_visc subroutine along with the flux_visc_state and flux_visc
functions.

-------------------------

01-03-2017 2:26 pm
I have tracked down the NaNs to negative pressures inside the Riemann solver.
I believe this is happening because the orders of magnitude of rho, u, v, E, etc.,
are too small.  That is, errors in the piecewise linear reconstruction are
responsible for producing states that have negative pressures.  I added a check
to the Riemann solver.  I believe I should modify the manufactured solution so that
the order of magnitude is at least one higher.  Alternatively, if my hypothesis is
correct, using a finer mesh should fix this issue by improving the accuracy of the
piecewise linear reconstruction.

-------------------------

01-03-2017 8:32 pm
I believe I tracked down the bugs.  The code is running without NaNs on a steady
solution.  I need to finish implementing the solve_steady subrouine.

-------------------------

01-04-2017 11:02 pm
I finished the solve_steady subroutine, but the convergence is really slow.  I need
to implement local time stepping now.

-------------------------

01/06/2017 12:32 am
I'm not sure what is wrong with the manufactured solution.  I'm going to try
to solve for the boundary layer over a flat plate in the incompressible
regime.  I can't find any mistakes in what I did with the method of manufactured
solution.  rho*v looks strange, as does E_t.  I'm not sure what's wrong.  I need
to either translate the flatplate grid from Plot3D to CGNS or add a function
to read the mesh from the Plot3D file.  Then, I need to finish implementing the
no-slip wall BC in solvers.f90.

-------------------------

01/07/2017 6:55 pm
The compressible Navier-Stokes solver isn't converging.  I implemented no-slip
wall BCs for the bottom wall only.  I used the Green-Gauss method for computing
the gradient at the wall.  It is not converging.  I think I'm going to try local
time stepping for the compression ramp problem and see what happens.

-------------------------

01/07/2017 9:40 pm
The local time stepping doesn't seem to be working even for the inviscid cases.
I'm not sure that it is implemented correctly.  I think I should try a multi-stage
scheme instead of forward Euler.  I can also add the implicit residual smoothing
relatively easily.  I need to check the values of the gradient at the wall for
the no-slip condition too.

-------------------------

01/07/2017 11:56 pm
Working on implementing Upwind Implicit Residual Smoothing (UIRS).  Need to pick
up in acceleration.f90.  I tried a 3-stage method using the "optimized" stage
coefficients given in the book by Blazek.  It is still not working.  I'm not
sure what is wrong...
